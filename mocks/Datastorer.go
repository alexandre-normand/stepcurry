// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import datastore "cloud.google.com/go/datastore"
import mock "github.com/stretchr/testify/mock"

// Datastorer is an autogenerated mock type for the Datastorer type
type Datastorer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Datastorer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields:
func (_m *Datastorer) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: c, k
func (_m *Datastorer) Delete(c context.Context, k *datastore.Key) error {
	ret := _m.Called(c, k)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Key) error); ok {
		r0 = rf(c, k)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: c, k, dest
func (_m *Datastorer) Get(c context.Context, k *datastore.Key, dest interface{}) error {
	ret := _m.Called(c, k, dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Key, interface{}) error); ok {
		r0 = rf(c, k, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: c, k, v
func (_m *Datastorer) Put(c context.Context, k *datastore.Key, v interface{}) (*datastore.Key, error) {
	ret := _m.Called(c, k, v)

	var r0 *datastore.Key
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Key, interface{}) *datastore.Key); ok {
		r0 = rf(c, k, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *datastore.Key, interface{}) error); ok {
		r1 = rf(c, k, v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Run provides a mock function with given fields: ctx, q
func (_m *Datastorer) Run(ctx context.Context, q *datastore.Query) *datastore.Iterator {
	ret := _m.Called(ctx, q)

	var r0 *datastore.Iterator
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Query) *datastore.Iterator); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Iterator)
		}
	}

	return r0
}
